using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace виселица
{
    public class Hangman
    {
        

        char[,] hangman1 =
        {
                { ' ' , '*' , '-' , '-' , '-' , '-' , '*' , ' ' , ' ' },
                { ' ' , '|' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                { ' ' , 'O' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                { ' ' , ' ' , ' ' , ' ' , '=' , '=' , '=' , '=' , '=' }
            };

        char[,] hangman2 =
        {
                { ' ' , '*' , '-' , '-' , '-' , '-' , '*' , ' ' , ' ' },
                { ' ' , '|' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                { ' ' , 'O' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                { ' ' , '|' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                { ' ' , ' ' , ' ' , ' ' , '=' , '=' , '=' , '=' , '=' }
            };

        char[,] hangman3 =
        {
                { ' ' , '*' , '-' , '-' , '-' , '-' , '*' , ' ' , ' ' },
                { ' ' , '|' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                { ' ' , 'O' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                { '/' , '|' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                { ' ' , ' ' , ' ' , ' ' , '=' , '=' , '=' , '=' , '=' }
            };

        char[,] hangman4 =
        {
                { ' ' , '*' , '-' , '-' , '-' , '-' , '*' , ' ' , ' ' },
                { ' ' , '|' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                { ' ' , 'O' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                { '/' , '|' , '\\' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                { ' ' , ' ' , ' ' , ' ' , '=' , '=' , '=' , '=' , '=' }
            };

        char[,] hangman5 =
        {
                { ' ' , '*' , '-' , '-' , '-' , '-' , '*' , ' ' , ' ' },
                { ' ' , '|' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                { ' ' , 'O' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                { '/' , '|' , '\\' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                { '/' , ' ' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                { ' ' , ' ' , ' ' , ' ' , '=' , '=' , '=' , '=' , '=' }
            };

        char[,] hangman6 =
        {
                { ' ' , '*' , '-' , '-' , '-' , '-' , '*' , ' ' , ' ' },
                { ' ' , '|' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                { ' ' , 'O' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                { '/' , '|' , '\\' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                { '/' , ' ' , '\\' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                { ' ' , ' ' , ' ' , ' ' , '=' , '=' , '=' , '=' , '=' }
            };
        public static int Output(int mistakes) 
        {
            switch (mistakes)
            {
                case 0:
                    char[,] hangman =
                    {
                    { ' ' , '*' , '-' , '-' , '-' , '-' , '*' , ' ' , ' ' },
                    { ' ' , '|' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                    { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                    { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                    { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                    { ' ' , ' ' , ' ' , ' ' , '=' , '=' , '=' , '=' , '=' }
                    };
                    break;
                    
                case 1:
                    hangman = new char[,]
                    {
                    { ' ' , '*' , '-' , '-' , '-' , '-' , '*' , ' ' , ' ' },
                    { ' ' , '|' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                    { ' ' , 'O' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                    { ' ' , '|' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                    { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                    { ' ' , ' ' , ' ' , ' ' , '=' , '=' , '=' , '=' , '=' }
                    };
                    break;

                case 2:
                    hangman = new char[,]
                    {
                    { ' ' , '*' , '-' , '-' , '-' , '-' , '*' , ' ' , ' ' },
                    { ' ' , '|' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                    { ' ' , 'O' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                    { '/' , '|' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                    { ' ' , ' ' , ' ' , ' ' , ' ' , ' ' , '|' , ' ' , ' ' },
                    { ' ' , ' ' , ' ' , ' ' , '=' , '=' , '=' , '=' , '=' }
                    };
                    break;
            }
            
            for ( int i = 0; i < .GetLength; i++)   
            return 0;
        }
    }
}
